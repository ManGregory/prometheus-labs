# Two common ways to monitor kubernetes cluster
# 1. Using prometheus operator (CRD)
# 2. Using helm and kube-prometheus-stack

# To avoid creation real kubernetes cluster, kind is used (kubernetes in docker)
# Create cluster in kind
azureuser@lab-ubuntu-vm:~$ kind create cluster --name lab-cluster
Creating cluster "lab-cluster" ...
 ‚úì Ensuring node image (kindest/node:v1.27.3) üñº
 ‚úì Preparing nodes üì¶  
 ‚úì Writing configuration üìú 
 ‚úì Starting control-plane üïπÔ∏è 
 ‚úì Installing CNI üîå 
 ‚úì Installing StorageClass üíæ 
Set kubectl context to "kind-lab-cluster"
You can now use your cluster with:

kubectl cluster-info --context kind-lab-cluster
azureuser@lab-ubuntu-vm:~$ kubectl cluster-info --context kind-lab-cluster
Kubernetes control plane is running at https://127.0.0.1:35945
CoreDNS is running at https://127.0.0.1:35945/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

# 1. Using prometheus operator
# Download bundle with operator definition and apply it to kubernetes
# this will download bundle from github and apply it to kubernetes
curl -sL https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.85.0/bundle.yaml | kubectl create -f -

# then apply your prometheus.yaml file
kubectl apply -f prometheus.yaml

# this 4 lines allow prometheus to explore pods and services:
# serviceMonitorSelector: {}
# serviceMonitorNamespaceSelector: {}
# podMonitorNamespaceSelector: {}
# podMonitorSelector: {}
# view real configuration using /config endpoint for prometheus

# 2. Using helm
# Add repos
azureuser@lab-ubuntu-vm:~$ helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
"prometheus-community" already exists with the same configuration, skipping
azureuser@lab-ubuntu-vm:~$ helm repo add kube-state-metrics https://kubernetes.github.io/kube-state-metrics
"kube-state-metrics" already exists with the same configuration, skipping
# Then run update
azureuser@lab-ubuntu-vm:~$ helm repo update

# then install using values.yaml
azureuser@lab-ubuntu-vm:~$ helm install kube-prometheus-stack prometheus-community/kube-prometheus-stack --namespace monitoring --create-namespace --values 
values.yaml
NAME: kube-prometheus-stack
LAST DEPLOYED: Mon Sep  8 21:09:48 2025
NAMESPACE: monitoring
STATUS: deployed
REVISION: 1
NOTES:
kube-prometheus-stack has been installed. Check its status by running:
  kubectl --namespace monitoring get pods -l "release=kube-prometheus-stack"

Get Grafana 'admin' user password by running:

  kubectl --namespace monitoring get secrets kube-prometheus-stack-grafana -o jsonpath="{.data.admin-password}" | base64 -d ; echo

Access Grafana local instance:

  export POD_NAME=$(kubectl --namespace monitoring get pod -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=kube-prometheus-stack" -oname)     
  kubectl --namespace monitoring port-forward $POD_NAME 3000

# view pods
azureuser@lab-ubuntu-vm:~$ kubectl get pods -A
NAMESPACE            NAME                                                        READY   STATUS    RESTARTS   AGE
kube-system          coredns-5d78c9869d-jxsns                                    1/1     Running   0          3m39s
kube-system          coredns-5d78c9869d-wtc69                                    1/1     Running   0          3m40s
kube-system          etcd-lab-cluster-control-plane                              1/1     Running   0          3m52s
kube-system          kindnet-5qb7j                                               1/1     Running   0          3m40s
kube-system          kube-apiserver-lab-cluster-control-plane                    1/1     Running   0          3m54s
kube-system          kube-controller-manager-lab-cluster-control-plane           1/1     Running   0          3m52s
kube-system          kube-proxy-4b7jq                                            1/1     Running   0          3m40s
kube-system          kube-scheduler-lab-cluster-control-plane                    1/1     Running   0          3m52s
local-path-storage   local-path-provisioner-6bc4bddd6b-5gx7s                     1/1     Running   0          3m40s
monitoring           alertmanager-kube-prometheus-stack-alertmanager-0           2/2     Running   0          67s
monitoring           kube-prometheus-stack-grafana-795488457d-5n8f9              3/3     Running   0          74s
monitoring           kube-prometheus-stack-kube-state-metrics-847c995689-jjxv7   1/1     Running   0          74s
monitoring           kube-prometheus-stack-operator-6b5b56cfbb-l7t5w             1/1     Running   0          74s
monitoring           kube-prometheus-stack-prometheus-node-exporter-6cnmh        1/1     Running   0          74s
monitoring           prometheus-kube-prometheus-stack-prometheus-0               2/2     Running   0          66s

# deploy weather service
azureuser@lab-ubuntu-vm:~$ kubectl apply -f k8s
deployment.apps/weather-service created
podmonitor.monitoring.coreos.com/weather-service-monitor created
service/weather-service created
servicemonitor.monitoring.coreos.com/weather-service-servicemonitor created

# view all services
azureuser@lab-ubuntu-vm:~$ kubectl get services -A
NAMESPACE     NAME                                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                        AGE
default       kubernetes                                       ClusterIP   10.96.0.1       <none>        443/TCP                        4m54s
default       weather-service                                  ClusterIP   10.96.21.178    <none>        80/TCP                         18s
kube-system   kube-dns                                         ClusterIP   10.96.0.10      <none>        53/UDP,53/TCP,9153/TCP         4m51s
kube-system   kube-prometheus-stack-coredns                    ClusterIP   None            <none>        9153/TCP                       2m13s
kube-system   kube-prometheus-stack-kube-controller-manager    ClusterIP   None            <none>        10257/TCP                      2m13s
kube-system   kube-prometheus-stack-kube-etcd                  ClusterIP   None            <none>        2381/TCP                       2m13s
kube-system   kube-prometheus-stack-kube-proxy                 ClusterIP   None            <none>        10249/TCP                      2m13s
kube-system   kube-prometheus-stack-kube-scheduler             ClusterIP   None            <none>        10259/TCP                      2m13s
kube-system   kube-prometheus-stack-kubelet                    ClusterIP   None            <none>        10250/TCP,10255/TCP,4194/TCP   2m6s
monitoring    alertmanager-operated                            ClusterIP   None            <none>        9093/TCP,9094/TCP,9094/UDP     2m6s
monitoring    kube-prometheus-stack-alertmanager               ClusterIP   10.96.63.177    <none>        9093/TCP,8080/TCP              2m13s
monitoring    kube-prometheus-stack-grafana                    ClusterIP   10.96.192.34    <none>        80/TCP                         2m13s
monitoring    kube-prometheus-stack-kube-state-metrics         ClusterIP   10.96.90.92     <none>        8080/TCP                       2m13s
monitoring    kube-prometheus-stack-operator                   ClusterIP   10.96.130.118   <none>        443/TCP                        2m13s
monitoring    kube-prometheus-stack-prometheus                 ClusterIP   10.96.30.115    <none>        9090/TCP,8080/TCP              2m13s
monitoring    kube-prometheus-stack-prometheus-node-exporter   ClusterIP   10.96.40.28     <none>        9100/TCP                       2m13s
monitoring    prometheus-operated                              ClusterIP   None            <none>        9090/TCP                       2m5s

# port forwarding for prometheus and grafana
azureuser@lab-ubuntu-vm:~$ kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus --address=0.0.0.0 9090:9090 &
[1] 88906
azureuser@lab-ubuntu-vm:~$ Forwarding from 0.0.0.0:9090 -> 9090
azureuser@lab-ubuntu-vm:~$ kubectl port-forward -n monitoring svc/kube-prometheus-stack-grafana --address=0.0.0.0 3000:80 &
[2] 88980
azureuser@lab-ubuntu-vm:~$ Forwarding from 0.0.0.0:3000 -> 3000
